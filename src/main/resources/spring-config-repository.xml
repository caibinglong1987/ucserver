<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:repository="http://www.springframework.org/schema/data/repository"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/data/repository http://www.springframework.org/schema/data/repository/spring-repository.xsd"
	default-lazy-init="true">

	<description>Spring数据持久层配置 </description>
	<!-- 注入参数配置 -->
	<context:property-placeholder
		ignore-unresolvable="true" location="classpath:project-repository.properties" />

	<!-- 数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${repository.jdbc.url}" />
		<property name="username" value="${repository.jdbc.username}" />
		<property name="password" value="${repository.jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${repository.druid.initialSize}" />
		<property name="minIdle" value="${repository.druid.minIdle}" />
		<property name="maxActive" value="${repository.druid.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${repository.druid.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${repository.druid.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${repository.druid.minEvictableIdleTimeMillis}" />
		<!-- 配置连接尝试 -->
		<property name="validationQuery" value="${repository.druid.validationQuery}" />
		<property name="testWhileIdle" value="${repository.druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${repository.druid.testOnBorrow}" />
		<property name="testOnReturn" value="${repository.druid.testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
		<property name="poolPreparedStatements" value="${repository.druid.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${repository.druid.maxPoolPreparedStatementPerConnectionSize}" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${repository.druid.filters}" />
	</bean>

	<!-- 数据源包装器 -->
	<bean id="dataSourceProxy"
		class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
		<property name="targetDataSource" ref="dataSource" />
	</bean>

        <!-- 数据源 -->
        <bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource"
                init-method="init" destroy-method="close">
                <!-- 基本属性 url、user、password -->
                <property name="url" value="${repository.jdbc1.url}" />
                <property name="username" value="${repository.jdbc1.username}" />
                <property name="password" value="${repository.jdbc1.password}" />
                <!-- 配置初始化大小、最小、最大 -->
                <property name="initialSize" value="${repository.druid.initialSize}" />
                <property name="minIdle" value="${repository.druid.minIdle}" />
                <property name="maxActive" value="${repository.druid.maxActive}" />
                <!-- 配置获取连接等待超时的时间 -->
                <property name="maxWait" value="${repository.druid.maxWait}" />
                <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
                <property name="timeBetweenEvictionRunsMillis" value="${repository.druid.timeBetweenEvictionRunsMillis}" />
                <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
                <property name="minEvictableIdleTimeMillis" value="${repository.druid.minEvictableIdleTimeMillis}" />
                <!-- 配置连接尝试 -->
                <property name="validationQuery" value="${repository.druid.validationQuery}" />
                <property name="testWhileIdle" value="${repository.druid.testWhileIdle}" />
                <property name="testOnBorrow" value="${repository.druid.testOnBorrow}" />
                <property name="testOnReturn" value="${repository.druid.testOnReturn}" />
                <!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
                <property name="poolPreparedStatements" value="${repository.druid.poolPreparedStatements}" />
                <property name="maxPoolPreparedStatementPerConnectionSize"
                        value="${repository.druid.maxPoolPreparedStatementPerConnectionSize}" />
                <!-- 配置监控统计拦截的filters -->
                <property name="filters" value="${repository.druid.filters}" />
        </bean>

        <!-- 数据源包装器 -->
        <bean id="dataSourceProxy1"
                class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
                <property name="targetDataSource" ref="dataSource1" />
        </bean>

	<!--指定实现JPA的适配器 -->
	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
	</bean>

	<!-- JPA实体管理工厂的配置 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSourceProxy" />
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan" value="com.roamtech.uc.model" />
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">${repository.hibernate.dialect}</prop>
				<prop key="hibernate.max_fetch_depth">${repository.hibernate.max_fetch_depth}</prop>
				<prop key="hibernate.hbm2ddl.auto">${repository.hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.show_sql">${repository.hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${repository.hibernate.format_sql}</prop>
				<prop key="hibernate.ejb.naming_strategy">${repository.hibernate.ejb.naming_strategy}</prop>
				<prop key="javax.persistence.validation.mode">${repository.javax.persistence.validation.mode}</prop>
                                <!-- 二级缓存 -->
                                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                                <prop key="javax.persistence.sharedCache.mode">ENABLE_SELECTIVE</prop>
                                <prop key="hibernate.generate_statistics">false</prop>
                                 <prop key="hibernate.cache.use_query_cache">true</prop>
			</props>
		</property>
	</bean>

	<!-- Jpa 事务管理器配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

        <!-- JPA实体管理工厂的配置 -->
        <bean id="opensipsEntityManagerFactory"
                class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
                <property name="dataSource" ref="dataSourceProxy1" />
                <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
                <property name="packagesToScan" value="com.roamtech.uc.opensips.model" />
                <property name="jpaProperties">
                        <props>
                                <prop key="hibernate.dialect">${repository.hibernate.dialect}</prop>
                                <prop key="hibernate.max_fetch_depth">${repository.hibernate.max_fetch_depth}</prop>
                                <prop key="hibernate.hbm2ddl.auto">${repository.hibernate.hbm2ddl.auto}</prop>
                                <prop key="hibernate.show_sql">${repository.hibernate.show_sql}</prop>
                                <prop key="hibernate.format_sql">${repository.hibernate.format_sql}</prop>
                                <prop key="hibernate.ejb.naming_strategy">${repository.hibernate.ejb.naming_strategy}</prop>
                                <prop key="javax.persistence.validation.mode">${repository.javax.persistence.validation.mode}</prop>
				<!-- 二级缓存 -->
				<!--<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>  
				<prop key="javax.persistence.sharedCache.mode">ENABLE_SELECTIVE</prop>  
				<prop key="hibernate.generate_statistics">true</prop>  
				 <prop key="hibernate.cache.use_query_cache">true</prop>-->
                        </props>
                </property>
        </bean>

        <!-- Jpa 事务管理器配置 -->
        <bean id="opensipsTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
                <property name="entityManagerFactory" ref="opensipsEntityManagerFactory" />
        </bean>
	<!-- Spring Data Jpa配置 -->
	<jpa:repositories base-package="com.roamtech.uc.repository"
		transaction-manager-ref="transactionManager"
		entity-manager-factory-ref="entityManagerFactory" />

        <!-- Spring Data Jpa配置 -->
        <jpa:repositories base-package="com.roamtech.uc.opensips.repository"
                transaction-manager-ref="opensipsTransactionManager"
                entity-manager-factory-ref="opensipsEntityManagerFactory" />
	<!-- JSR303 校验配置 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
</beans>
